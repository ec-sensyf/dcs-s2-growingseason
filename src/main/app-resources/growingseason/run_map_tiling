#!/bin/bash

# add a trap to exit gracefully
function cleanExit ()
{
   local retval=$?
   local msg=""
   case "$retval" in
     $SUCCESS)      msg="Processing successfully concluded";;
     $ERR_NOPARAMS) msg="Outout format not defined";;
     $ERR_GDAL)     msg="Graph processing of job ${JOBNAME} failed (exit code $res)";;
     *)             msg="Unknown error";;
   esac
   [ "$retval" != "0" ] && ciop-log "ERROR" "Error $retval - $msg, processing aborted" || ciop-log "INFO" "$msg"
   exit $retval
}
trap cleanExit EXIT

# case "$HOSTNAME" in
case "$USER" in
    # sensyf-* )
    mapred )
        # source the ciop functions (e.g. ciop-log)
        # The file is /usr/lib/ciop/libexec/ciop-functions.sh
        source ${ciop_job_include}
        BINDIR=/application/growingseason/bin
        ;;
    * )
        # create aliases for ciop routines
        TMPDIR=${TMPDIR-.}
        BINDIR=./bin/
        function ciop-log { echo -- CIOP-LOG "$@"; }
        # function ciop-copy { echo -- CIOP-COPY "$@"; ln -s "$6" "$5/."; }
        function ciop-publish { echo -- CIOP-PUBLISH "$@"; }

        # _mode=${1-average}
        # _startdate=${2-2000-01-01}
        # _enddate=${3-2010-12-31}
        # _othreshold=${4-0.7}
        # _ethreshold=${5-0.9}
        _tilesize=${6-1024}
        function ciop-getparam { echo $(eval echo '$'"_$1"); }
        ;;
esac

interp=/usr/bin/python
# script=${BINDIR}/toy_tile.py
script=${BINDIR}/sensyf-tile

# mode=$(ciop-getparam mode)
# othreshold=$(ciop-getparam othreshold)
# ethreshold=$(ciop-getparam ethreshold)
# ciop-log INFO "mode: $mode"
# ciop-log INFO "othreshold: $othreshold"
# ciop-log INFO "ethreshold: $ethreshold"

tilesize=$(ciop-getparam tilesize)
ciop-log INFO "tilesize: $tilesize"

FLAGS="-r $tilesize -organize_by_tile "

# define the exit codes
SUCCESS=0
ERR_NOINPUT=1
ERR_NOPARAMS=2
ERR_GDAL=4
ERR_COPY=5

# create the input directory
SRCDIR=$TMPDIR/inputs/
mkdir -p $SRCDIR
rm -rf $SRCDIR/*
# DSTDIR=$TMPDIR/tile_files/
DSTDIR="$TMPDIR/${mapred_task_id-$(date '+%FT%H%M%S')-$$}"
mkdir -p $DSTDIR
rm -rf $DSTDIR/*

copy_inputs () {
    while read -r inputurl; do
         ciop-log INFO "ciop-copy -r 3 -f -O $SRCDIR $inputurl"
         ciop-copy -r 3 -f -O $SRCDIR $inputurl
    done
}

# mode=$(ciop-getparam mode)


ciop-log INFO "*** running tiling ***"

copy_inputs

# python toy_tile.py srcdir dstdir
ciop-log INFO 'tiling  ...'
echo $interp $script $FLAGS $SRCDIR $DSTDIR
$interp $script $FLAGS $SRCDIR $DSTDIR                 # > /dev/null 2>&1

# Create one tar file per tile, containing all inputs for that tile

cd $DSTDIR
for tile in *; do
    tar zcvf $tile.tar.gz $tile
    rm -rf $tile
done


ciop-publish -r $DSTDIR

exit 0

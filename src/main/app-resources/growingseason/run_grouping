#!/bin/bash

# define the exit codes
SUCCESS=0
ERR_NOINPUT=1
ERR_NOPARAMS=2
ERR_GDAL=4
ERR_COPY=5

# add a trap to exit gracefully
function cleanExit ()
{
   local retval=$?
   local msg=""
   case "$retval" in
     $SUCCESS)      msg="Processing successfully concluded";;
     $ERR_NOPARAMS) msg="Outout format not defined";;
     $ERR_GDAL)     msg="Graph processing of job ${JOBNAME} failed (exit code $res)";;
     *)             msg="Unknown error";;
   esac
   [ "$retval" != "0" ] && logerror "Error $retval - $msg, processing aborted" || loginfo "$msg"
   exit $retval
}
trap cleanExit EXIT

case "$USER" in
    mapred )
        # source the ciop functions (e.g. ciop-log)
        # The file is /usr/lib/ciop/libexec/ciop-functions.sh
        source ${ciop_job_include}
        BINDIR=/application/growingseason/bin
        function loginfo () { ciop-log INFO "$@"; }
        function logerror () { ciop-log ERROR "$@"; }
        function copy () {
            url="$1"
            dst="$2"
            loginfo "Copying <$url> to <$dst>"
            ciop-copy -r 3 -f -O $dst $url
        }
        loginfo "Running in cluster"
        ;;
    * )
        # create aliases for ciop routines
        TMPDIR=${TMPDIR-$(pwd)}
        BINDIR=.
        function loginfo () { echo "INFO: $@"; }
        function logerror () { echo " ERROR: $@"; }
        function ciop-publish { echo -- CIOP-PUBLISH "$@"; }
        copy () {
            url="$1"
            dst="$2"
            loginfo "Copying (linking) <$url> to <$dst>"
            ln -s "$url" "$dst/."
        }

        _mode=${1-average}
        _startdate=${2-2000-01-01}
        _enddate=${3-2010-12-31}
        _othreshold=${4-0.7}
        _ethreshold=${5-0.9}
        function ciop-getparam { echo $(eval echo '$'"_$1"); }
        ;;
esac


# create the input directory
SRCDIR=$TMPDIR/inputs/
mkdir -p $SRCDIR
rm -rf $SRCDIR/*
DSTDIR=$TMPDIR/outputs/
mkdir -p $DSTDIR
rm -rf $DSTDIR/*

ciop-log INFO "*** running grouping ***"

cd $SRCDIR
while read -r url; do
    copy $url $TMPDIR || exit $ERR_COPY
    tar zxvf $TMPDIR/$(basename $url)
done


# python toy_tile.py srcdir dstdir
loginfo 'grouping  ...'

for tile in *; do
    tar zcvf $DSTDIR/$tile.tar.gz $tile
    # rm -rf $tile
done

ciop-publish $DSTDIR/*

exit 0

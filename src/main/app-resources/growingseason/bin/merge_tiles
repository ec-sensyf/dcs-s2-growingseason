#!/bin/bash

# define the exit codes
SUCCESS=0
ERR_NOINPUT=1
ERR_NOPARAMS=2
ERR_GDAL=4
ERR_COPY=5

# add a trap to exit gracefully
function cleanExit ()
{
   local retval=$?
   local msg=""
   case "$retval" in
     $SUCCESS)      msg="Processing successfully concluded";;
     $ERR_NOPARAMS) msg="Output format not defined";;
     $ERR_GDAL)     msg="Graph processing of job ${JOBNAME} failed (exit code $res)";;
     *)             msg="Unknown error";;
   esac
   [ "$retval" != "0" ] && logerror "Error $retval - $msg, processing aborted" || loginfo "$msg"
   exit $retval
}
trap cleanExit EXIT

case "$USER" in
    mapred )
        # source the ciop functions (e.g. ciop-log)
        # The file is /usr/lib/ciop/libexec/ciop-functions.sh
        source ${ciop_job_include}
        BINDIR=/application/growingseason/bin
        AUXDIR=/application/growingseason/src
        PYTHON=/opt/anaconda/bin/python
        function loginfo () { ciop-log INFO "$@"; }
        function logerror () { ciop-log ERROR "$@"; }
        function publish () { ciop-publish -m "$@"; }
        function copy () {
            url="$1"
            dst="$2"
            loginfo "Copying <$url> to <$dst>"
            ciop-copy -r 3 -f -O $dst $url
        }
        loginfo "MERGE Running in cluster"
        ;;
    * )
        # create aliases for ciop routines
        TMPDIR=${TMPDIR-.}
        BINDIR=./bin/
        AUXDIR=./src/
        PYTHON=$(which python)
        function loginfo () { echo "INFO: $@"; }
        function logerror () { echo " ERROR: $@"; }
        function publish { echo -- CIOP-PUBLISH "$@"; }
        copy () {
            url="$1"
            dst="$2"
            loginfo "Copying (linking) <$url> to <$dst>"
            ln -s "$url" "$dst/."
        }
        ;;
esac

# create the input directory
SRCDIR=$TMPDIR/inputs/
mkdir -p $SRCDIR
DSTDIR=$TMPDIR/outputs/
mkdir -p $DSTDIR

copy_inputs () {
    while read -r url; do
         copy $url $SRCDIR || exit $ERR_COPY
    done
}

copy_inputs

for type in $(ls -1 $SRCDIR | cut -d_ -f2 | sort -u); do
    for year in $(ls -1 $SRCDIR | cut -d_ -f3 | sort -u); do
        ofile=$DSTDIR/GS_${type}_${year}.tiff
        vfile=$TMPDIR/GS_${type}_${year}.vrt
        loginfo "MERGE merging Growth Season $type result"
        $PYTHON $BINDIR/gdal_merge.py $SRCDIR/GS_${type}_${year}_*.tiff -o $ofile
        gdal_translate -of vrt $ofile $vfile
        ed -s $vfile < "$AUXDIR/colorize_${type}.ed"
        $PYTHON $AUXDIR/apply_ctab.py "$vfile" "$ofile"
        rm "$vfile"
    done
    publish $DSTDIR/GS_${type}_*.tiff
    loginfo "MERGE Done with Growth Season $type"
done

ls -lh $DSTDIR
loginfo "MERGE Done"

cleanExit 0
